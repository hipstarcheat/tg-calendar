// === Telegram Mini App –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å ===
const tg = window.Telegram.WebApp;
tg.expand();
const user = tg.initDataUnsafe?.user || { id: "0", username: "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω" };

// üîó URL —Ç–≤–æ–µ–≥–æ Google Apps Script (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∏–ø–∞ https://script.google.com/macros/s/AKfycb.../exec)
const apiUrl = "https://script.google.com/macros/s/AKfycbwzCCGv-zM_7BFb_E0N4MnHmy_vBQmujcaxGU0lO3cTu8zVMU3klbFTxrza13lcbV-Y/exec";

// üîπ –¶–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ user.id Telegram)
const userColors = {
  "298802988": "blue",  // –ê—Ä—Ç—É—Ä
  "654321": "green"  // –í–ª–∞–¥
};

// üîπ –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const calendar = document.getElementById("calendar");
const message = document.getElementById("message");
const legend = document.getElementById("legend");

// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (1‚Äì31) ===
for (let day = 1; day <= 31; day++) {
  const cell = document.createElement("div");
  cell.className = "day";
  cell.textContent = day;
  cell.onclick = () => handleDayClick(day, cell);
  calendar.appendChild(cell);
}

// === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ===
async function loadDays() {
  try {
    const res = await fetch(apiUrl);
    const data = await res.json();

    data.forEach(item => {
      const dayNum = parseInt(item.date);
      const cell = calendar.children[dayNum - 1];
      if (!cell) return;

      const color =
        userColors[String(item.userId)] ||
        (item.userId === "999" ? "red" : "yellow");
      cell.classList.add(color);
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–Ω–µ–π:", err);
  }
}

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –¥–Ω—é ===
async function handleDayClick(day, cell) {
  if (cell.classList.contains("blue") || cell.classList.contains("green") ||
      cell.classList.contains("red") || cell.classList.contains("yellow")) {
    message.textContent = "–≠—Ç–æ—Ç –¥–µ–Ω—å —É–∂–µ –∑–∞–Ω—è—Ç!";
    return;
  }

  try {
    const body = { userId: String(user.id), date: String(day) };
    const res = await fetch(apiUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(body)
    });

    const data = await res.json();

    if (data.status === "ERROR_DAY_TAKEN") {
      message.textContent = "–î–µ–Ω—å —É–∂–µ –∑–∞–Ω—è—Ç!";
    } else {
      const color = userColors[String(user.id)] || "yellow";
      cell.classList.add(color);
      message.textContent = "–°–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!";
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–Ω—è:", err);
    message.textContent = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–Ω—è!";
  }
}

// === –õ–µ–≥–µ–Ω–¥–∞ ===
legend.innerHTML = `
  <div class="legend-item"><div class="legend-color blue"></div> –ê—Ä—Ç—É—Ä</div>
  <div class="legend-item"><div class="legend-color green"></div> –í–ª–∞–¥</div>
  <div class="legend-item"><div class="legend-color red"></div> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 3</div>
  <div class="legend-item"><div class="legend-color yellow"></div> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 4</div>
`;

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
loadDays();